Q1. Passing Values from Parent to ProductCard Component?
// Parent Component
const ProductList = () => {
  const products = [
    { id: 1, name: "iPhone 15", price: 799 },
    { id: 2, name: "MacBook Air", price: 1299 }
  ];

  return (
    <div>
      {products.map(product => (
        <ProductCard
          key={product.id}
          name={product.name}
          price={product.price}
        />
      ))}
    </div>
  );
};

// Child Component
const ProductCard = ({ name, price }) => (
  <div>
    <h2>{name}</h2>
    <p>${price}</p>
  </div>
);





 Q2. Like Button Toggle using useState?
import React, { useState } from "react";

const ProductCard = ({ name, price }) => {
  const [liked, setLiked] = useState(false);

  const toggleLike = () => setLiked(prev => !prev);

  return (
    <div>
      <h2>{name}</h2>
      <p>${price}</p>
      <button onClick={toggleLike}>
        {liked ? "Liked ‚ù§Ô∏è" : "Like ü§ç"}
      </button>
    </div>
  );
};



Q3. Search Input with Controlled Component?
const SearchBar = ({ searchQuery, setSearchQuery }) => (
  <input
    type="text"
    value={searchQuery}
    onChange={(e) => setSearchQuery(e.target.value)}
    placeholder="Search products..."
  />
);

// In parent:
const App = () => {
  const [searchQuery, setSearchQuery] = useState("");

  return (
    <div>
      <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
      {/* filter and display products based on searchQuery */}
    </div>
  );
};



Q4. Sharing Theme Across App using useContext?

1) Create a Theme Context:
// ThemeContext.js
import { createContext, useState, useContext } from "react";

const ThemeContext = createContext();

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState("light");

  const toggleTheme = () =>
    setTheme((prev) => (prev === "light" ? "dark" : "light"));

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

2)Use the provider at the root:
// index.js or App.js
<ThemeProvider>
  <App />
</ThemeProvider>


3)Consume in any component:
const ThemeSwitcher = () => {
  const { theme, toggleTheme } = useTheme();

  return (
    <button onClick={toggleTheme}>
      Current Theme: {theme}
    </button>
  );
};




Q5. Protecting Route (e.g., /checkout)?
import { Navigate } from "react-router-dom";

const PrivateRoute = ({ children, isAuthenticated }) => {
  return isAuthenticated ? children : <Navigate to="/login" />;
};

// Usage in App.jsx or Routes.jsx
<Route
  path="/checkout"
  element={
    <PrivateRoute isAuthenticated={userLoggedIn}>
      <CheckoutPage />
    </PrivateRoute>
  }
/>

